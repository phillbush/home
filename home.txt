                                 home

This document describe my system and desktop, how I use it and how to
set it up.  This document is written in the incipit format, and can be
converted into troff with the incipit(1) script.  (Incipit is a markup
language I created).

§ Hardware

I use a secondhand Thinkpad T430 model 23501M2.

What I expected.
The following is the stock specification of this model, which comes
without the iconic biometric fingerprint reader.

{
	i5-3320M(2.6GHz), 8GB RAM, 320GB 7200rpm HD, 14in 1600x900 LCD,
	Intel HD Graphics, DVD Recordable, Intel 802.11agn wireless,
	WWAN upgradable, Bluetooth, 1Gb Ethernet, UltraNav, Secure Chip,
	Camera, 9c Li-Ion, Win7 Pro 64
}

What I bought.
However, being secondhand, the computer I bought was different from the
stock.  It came with a 465GB 7200rpm HD and a nonfunctional Bluetooth.

Modifications.
After receiving it, I made some modifications on the computer.
• I replaced the DVD optical drive with a Serial Ultrabay Enhanced HDD
  Adapter.  The adapter contains a TOSHIBA MQ01ABD0 500GB hard drive.
  See «https://thinkwiki.org/wiki/Ultrabay».
• I replaced the T430 chiclet-style keyboard with the T420 classic
  keyboard, using the method 2 (Sand down the nubs to fit in the T430
  palmrest) on «https://thinkwiki.org/wiki/Upgrading_T430_Keyboard».
  I have not flashed the BIOS to make the keyboard work from boot; but
  I use «xkbcomp(1)» to set the keymap on X11.
• I wrapped the T430 lid with a black faux leather vinyl adhesive.
  There are some videos on YouTube on how to wrap the laptop lid.

Future modifications.
There are other modifications I want to do on it.  For information on
T430 modding, see «https://medium.com/@n4ru/3dff3f6a8e2e».  I want to
do the following.
• Replace the CPU with a i7–3540M or a i7–3632QM.  Or with a i7–3840QM
  and a new heatsink.
• Replace the screen with a T440s/T440p 1080p FHD IPS screen.  See
  «https://thinkwiki.org/wiki/Replacing_T430_screen_with_a_better_one».
• Flash the BIOS.  See «https://github.com/n4ru/1vyrain».
• Replace the touchpad stick.
• Buy a slice battery.


§ System

I use OpenBSD -stable.  See «https://www.openbsd.org/faq» for more
information on the operating system and how to install it.

User.
After installation, I run «userinfo(8)» to make sure my user is in the
`wheel` user group and in the `staff` login class.  If it is not, I set
it up with «usermod(8)».

Doas.
Then, I create `/etc/doas.conf` to give administrator priviledges to
the `wheel` group.  The example file at `/etc/examples/doas.conf` is
reasonable, and can be used.  However, I like to not being asked for
a password again for some time after successfully authenticating.  I
also do not want the `$DISPLAY` environment variable to be retained.
{
	# echo "permit persist keepenv setenv { -DISPLAY } :wheel" >/etc/doas.conf
}

System resources limits.
The default system resources limits to the `staff` login class defined
at `/etc/login.conf` are reasonable.  But the `datasize-cur` option can
be increased a little bit, if necessary.
{
	# vi /etc/login.conf
}

Power management.
Then, I enable «apmd(8)» for power management in my laptop.  I use the
`-L` flag instead of the `-A` flag because it showed to heat less the
computer.  I use the `-z 10` flag to suspend the system when the battery
gets to 10% and no AC is connected.  I use the `-t 60` for «apmd(8)» to
poll the power state once per 60 seconds and log it via «syslog(3)».
{
	# rcctl enable apmd
	# rcctl set apmd flags -L -z 15 -t 60
	# rcctl start apmd
}

X Display Manager.
If «xenodm(1)» wasn't enabled during installation, it can be done so
later like any other system daemon.  I also edit xenodm's rc file
`/etc/X11/xenodm/Xsetup_0` to comment the line calling «xconsole(1)»,
disabling the xconsole window on the login screen.  I also add the line
`xset b off` to disable the system beep.
{
	# rcctl enable xenodm
	# rcctl start xenodm
	# cat <<EOF | ed -s /etc/X11/xenodm/Xsetup_0
	,s/^xconsole/#&/
	\$a
	xset b off
	.
	w
	EOF
}


§ Home directory

The contents of my `$HOME` directory are listed below.
Note that I do not use the XDG home structure.

• `~/.profile`:
  Shell script that sets the environment variables necessary
  to set up a user session.

• `~/.session`:
  Shell script called by ksh(1) to set up a shell session
  (prompt, aliases, etc).

• `~/.xsession`:
  Shell script called by xenodm(1) to set up a X session
  (notification system, window manager, etc).

• `~/files/`:
  Where I archive documents, media, and files for consumption.
  Each category of files has a subdirectory in it.
  For example, `~/files/doc/` for non-fiction books;
  `~/files/lit/` for fiction books;
  `~/files/meme/` is the meme folder;
  `~/files/mus/` is the music folder; etc.

• `~/proj/`:
  Where I put whatever I am working on (mostly college stuff, things I
  am learning, and programs I write).  Each project has a subdirectory
  in it.  For example, `~/proj/xmenu/` for xmenu(1); `~/proj/c/` for
  notes on the C Programming Language; etc.

• `~/rules/`:
  Configuration files (aka dotfiles).  For example, `~/rules/vimrc` (for
  vim); `~/rules/keybindings` (for sxhkd); etc.

• `~/skel/`:
  Skeleton files, that is, templates for different file formats.
  For example, `~/skel/Makefile` is a template for a Makefile;
  `~/skel/man.1` is a template for a section 1 man page; etc.

• `~/theme/`:
  Where I keep icons, cursors, fonts, etc.

• `~/tmp/`:
  Download directory and where I dump stuff.
  I try to keep it clean, but most of the time it is a mess.

• `~/usr/`:
  Program files (binaries, sources, manuals, etc).  Each subdirectory
  contain files installed from a given source or using a given method.
  For example, `~/usr/local/` contains data for programs I install
  manually; `~/usr/python/` is for programs installed with pip(1);
  `~/usr/go/` is for programs installed with go(1); etc.  Each
  subdirectory contains the directories `bin/`, `src/`, and `man/`
  (for binaries, source, manual and other files).  For example,
  `~/usr/go/bin/lf` is the binary for lf installed by go(1);
  `~/usr/local/man/man1/xmenu.1` is the manual for xmenu(1) installed by
  its Makefile; etc.

• `~/var/`:
  Files that are not managed manually, but by applications.
  `~/var/trash/` is for trashed files managed by trash(1) and untrash(1);
  `~/var/mail/` is for email managed by mutt(1), mbsync(1) and others;
  `~/var/history/` is for command history from ksh(1), xprompt(1) and others;
  `~/var/cache/` is for cache used and generated by several programs.


§ Profile

Environment variables are set and exported in the `~/.profile` file.
I prefer to use environment variables than configuration files to
configure my programs.

Installation prefixes.
The first part of this file sets the `$PATH` and `$MANPATH` environment
variables.  It loops through all the installation prefixes and verifies
whether there are binary directories or manpage directories in it, and
set those variables accordingly.  There are a lot of such prefixes in a
OpenBSD system, `/`, `/usr/`, `/usr/X11R6/` and `/usr/local/` are the
standard directories.  I also install some applications that creates
prefixes under `/usr/local`: `/usr/local/plan9`, `/usr/local/jdk-11`,
and `/usr/local/heirloom-doctools`.  In my `$HOME` there is also some
prefixes under `$HOME/usr`.  I then export those variables along with
`$HOME` and `$TERM`.

Local installation directories.
I install manually built programs at `~/usr/local/`.  I often use `make
-e install` to install stuff on the `$HOME/usr/local` prefix.  The `-e`
flag says that some variables (in this case, the prefix variables) must
be inherited from the environment.  Programs built by a language package
manager are installed at a directory under `~/usr/` specific to that
package manager.

Ksh terminal session.
My terminal session uses «ksh(1)» as shell.  This shell run commands
from the file pointed at by `$ENV` at the beginning of the session.
See «§Terminal Session» bellow.

Locale and timezone.
I live in Brazil, so I set `$LANG` to `pt_BR.UTF-8`.  Programs in base
ignore the `pt_BR` part, but programs in ports don't.  For character
encoding, I use `en_US.UTF-8` to force UTF-8 encoding.  For collation
order, I use `C` to force bytewise sorting rather than Unicode localized
collation.  I then set `$TZ` (timezone) to `America/Sao_Paulo`.

Directories.
The various directories and `$PATH`-like environment variables are set
in this block of lines.

Rule files.
My configuration files (or rules files, as I call them) live in the
`~/rules/` directory.  Some applications need a command line option to
read their rules files from that directory; others need a environment
variable.

My username.
I set `$IRCNAME` and other variables to `phillbush`.

Default programs.
Some environment variables define the default program to be used to open
or edit a file.

Theme.
Environment variables for themes, cursors, fonts, etc, come next.

Other stuff.
The remaining of the file contains variables specific to certain
programs or toolkits, like «firefox(1)», «nethack(6)», «xprompt(1)»,
«ls(1)», etc.

Umask.
At the end of `~/.profile`, I set the file mode creation mask.


§ Terminal Session

My terminal session is set up by commands run from the `~/.session`
script.

Set IFS for this file.
At the beginning of the file, I set the `$IFS` variable to newline,
after saving its old value in a dummy variable.  The IFS is necessary
for some commands in this file.  At the end of the file, the `$IFS` is
restored to its old value, and the dummy variable is unset.

Complete.
The `complete` function sets the `complete_CMDNAME` variables only if
a command named `CMDNAME` exists.

Search through history.
The `hist` function lists the command history grepping for the given
argument.  However, if the first argument is a "-", `hist` lists the
command history grepping for the second argument with number indices
before each entry, and reads the user input for a number; and reruns
the command with a given number (or the commands in a range, if two
numbers are entered).  If the read input is prefixed with an `e`
character, the command or commands are edited before run.

Run previous non-doas command with doas.
The most useful function is `fuck`, which rerun the previous command
with «doas(1)».

Directory stack.
To navigate between directories, I use something like bash's directory
stack (managed by the builtin commands `pushd` and `popd`).  The
function `dirs` list the directories in that stack.  The way I use the
stack differs from how pushd and popd work.

Change directory.
I override the `cd` builtin command with a function.  The path given to
the function can be a directory, or a regular file (in which case is
considered the directory in which it resides).  The function also sets
the completion for the `make` command to the Makefile in the current
directory.  If an argument is given, it is interpreted as follows.
• If the sole argument is a `+` the current directory is added to the
  beginning of the directory stack.
• If the first argument is a `+` followed by a list of paths, those
  paths are added to the directory stack.
• If the sole argument is `+N` (where N is a number), the N-th entry
  on the directory stack is moved to the beginning of the stack and it
  becomes the current directory.
• If the sole argument is a `-`, the previous current directory becomes
  the current directory.
• If the sole argument is `-N` (where N is a number), the N-th entry
  on the directory stack is removed from the stack.
• If the sole argument is composed with dots, a directory up in the
  hierarchy becames the current directory.  `cd ..` goes to the parent
  directory, `cd ...` goes to the parent's parent's directory, etc.
• If the sole argument is `..X` (where X is a word), go to the first
  directory up in the hierarchy containing word.  For example, if I am
  at `/home/phill/tmp/stuff/foo` and I enter the command `cd ..tmp`, I
  go to `/home/phill/tmp`.
• If the sole argument is a path, go to that path.

CDPATH.
The path supplied to the `cd` function is relative to the directories
listed (and separated with a colon) on the `$CDPATH` environment
variable.  I set it to the current directory (it must be the first
directory for a sane use of `cd`), my projects directory and my files
directory.

History.
History is saved on `~/var/history/ksh.hist`.

FC editor.
The fc builtin command (used by the `hist` function) needs this variable
to run the editor.  If not set, it uses «ed(1)» by default.

Options.
I use «ksh(1)» with emacs-like keybindings (for ^U and ^K, etc).
I also enable brace expansion.

Aliases.
I use few aliases.  There are aliases to file management, list files,
hexdump, commands with human-readable output.

Completions.
I set up the completion lists for tab-completing the arguments of some
commands.  Those completion lists are set only once when the command
starts.  I also set the completion list for `make` at the end of the
`cd` command (see above).

Prompt.
My PS1 prompt has the following structure:
• First, the window title is set to the name of the tty device (on
  `/dev/`) and the pwd (with the `$HOME` prefix replaced with a `~`)
  separated by a colon and a space.
• The prompt begins with a newline, to display vertical space
  between the output of the previous command and the current prompt.
  This makes easier the prompt visual identification.
• The left prompt consists of a single `❯` character.  This character is
  white for normal users and red for the super user.  The left prompt is
  padded at the left with a single space.
• The right prompt is the pwd with the `$HOME` prefix replaced with a
  `~`.  The right prompt is padded at the right with a single space.

Print non-zero exit value.
If the previous command exits with non-zero exit status, this exit
status is printed, as bold and red, after the command exits.


§ X11 Session

I use a blank desktop with no bars, docks or panels.  My X11 session
is set up by commands run from the `~/.xsession` script.  This script
is an literal Rube Goldberg machine, full of pipes and background jobs.
Several functions are defined in this file.  I'll explain them as they
are called.  There are thre ways to interact with the desktop: with a
desktop menu, by entering commands, or via keybindings.  All of them
output a command to a interpreter function called `xinterp`.  Responses
are output in a notification window managed by «xnotify(1)».  Each piece
communicates with another by means of two named pipes, `$xnotifyfifo`
and `$xinterpfifo`.

Create temporary directory and named pipes.
The first thing done when I log into an X session is to create the
temporary directory and give it 0700 permission.  In this directory
three files will exist:
• xinterpfifo: The named pipe containing desktop commands that will be
               read and interpreted by the `xinterp` function.
• xnotifyfifo: The named pipe containing notification strings that will
               be read and interpreted by «xnotify(1)».
• coverfile: A png file of the cover of the currently playing song.

Kill background jobs on exit.
I trap the EXIT special signal to call the function `atexit` when the
script terminates.  This function will remove the temporary directory
created previously and kill all the background jobs (there will be a
lot of them).

Load environment variables and xresources.
I load the environment variables (by sourcing `~/.profile`) and load the
X resources with «expenv(1)» and «xrdb(1)» (expenv is needed to expand
environment variables in the resources file).

Set icon variables.
Several icons are used through this script, both in the pie menu, and
in the notifications.  I use «icon(1)» and «iconcache(1)» to get the
filename of several icons (and if necessary, cache their PNG version)
and read those names into several variables; all of them beginning with
"icon_".

Other stuff.
• Load keymap: I use a custom key mapping for my keyboard.  The key map
  is defined on `$RULESDIR/xkeymap` and interpreted by «xkbcomp(1)».
• Set cursor: Nobody likes the default X-like cursor of X11. I set the
  left pointing cursor as the default cursor for the root window.
• Fonts: Load font directories.
• Make mouse invisible after a brief period: I call «unclutter(1) to
  make the cursor invisible after a brief period of time.
• Thinkpad trackpoint: I run several commands to make the thinkpad
  trackpoint work and to make a one-, two-, and three-finger tap on
  the touchpad emulate the first, second, and third mouse button,
  respectively.
• Set background:  I use a black and gray grid-like background.
• Music daemon: Music is managed by the «mpd(1)» music player daemon.

Desktop Notification.
The `$xnotifyfifo` variable points to a named pipe read by a program
called «xnotify(1)», which pops up a desktop notification for each read
line.  This named pipe is written by the following functions.
• The `notifycpu` function uses `tail -f` to check the battery and
  CPU temperature, and writes a notification if one of them exceed
  the predetermined values.
• The `notifymus` function uses `mpc current --wait` to get the
  currently playing song from «mpd(1)», generates its cover image, and
  writes a notification for this song.
• The `xinterp` function, which will be explained below, interpret
  several instructions and writes notifications for some of them.
  For example, when it receives an instruction to change the current
  desktop, a notification listing the desktops is written.
• The `wm` function, which will be explained below, run the window
  manager and writes notifications for the geometry of the window being
  moved or resized.

Desktop Interpreter.
The `$xinterpfifo` variable points to a named pipe read by a function
called `xinterp`.  This function reads instructions from its stdin and
run a given command depending on the instruction.  Those instructions
are generated by three functions, that will be explained below: `keys`,
`prompt` and `menu`.  For example, when selecting Firefox on the menu,
the command `run firefox` is sent to `xinterp`, which will open a new
instance of a program or focus an already existing one.  `xinterp`
understand several instructions, such as to launch an application, open
a manual page with, change the current desktop, manipulate the current
window, etc.  `xinterp` depends on a lot of programs and scripts
scattered over `$PATH`.

Command system.
Three functions generate instructions for `xinterp`.
• The `keys` function uses «xbindecho(1)» to bind keys to instructions.
  When a bound key is pressed, a instruction is output to `xinterp`.
• The `prompt` function uses «xkeyecho(1)» to call «xprompt(1)» whenever
  Alt+Space is pressed.  When pressed, this key combination displays a
  prompt, which reads instructions to be output to `xinterp`.
• The `menu` function uses «xbuttonecho(1)» to call «pmenu(1)» whenever
  the root window is clicked with the right mouse button.  When such
  click occurs, a pie menu is displayed, listing some graphical options
  corresponding to a select subset of instructions to be output to
  `xinterp`.

Window Manager.
The `wm` function calls the «shod(1)» window manager.  It is an hybrid
(tiling and floating) tabbed window manager that is controlled solely
by responding to client messages with EWMH hints and ICCCM events and
by using a given key modifier with the mouse pointer.  Windows begin
floating on the desktop and are spawned in a proper empty place.  When
a window is maximized, it is tiled.  Tiled windows are organized in
columns; each tiled window ocupies a row in a column.  This columnated
behavior imitates the way «acme(1)» and «wmii(1)» handle their columns
and frames.


§ Theme

Themes are installed mostly at the `~/theme` directory.
I use the following themes.

• Tango color scheme:
  The 16 colors of my terminal emulator are those from the palette used
  by the Tango icon library.  This palette is described in the wikipedia
  article «https://en.wikipedia.org/wiki/Tango_Desktop_Project#Palette».

• Retrosmart icon theme:
  I use the Retrosmart icon theme, a set of icons mainly based on the
  Haiku OS look («https://github.com/mdomlop/retrosmart-icon-theme»).

• Retrosmart X11 cursor theme:
  I use the white version with alpha shading of the Retrosmart X11
  cursor theme («https://github.com/mdomlop/retrosmart-x11-cursors»).

• Input Mono Narrow font:
  I use the Input Mono Narrow font from the Input family of fonts
  («https://input.djr.com»).

• Motif-like window decoration:
  I use the default window decoration distributed with the shod window
  manager.

• Black background:
  I use a «xsetroot(1)» to set my background, with the options
  `-mod 3 3 -bg '#000000' -fg '#121212'`
