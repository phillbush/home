#!/bin/ksh

# check if command exists and set list of completions for it
complete() {
	if type skel >/dev/null
	then
		typeset cmd="$1"
		typeset num="$2"
		shift 2
		set -A "complete_${cmd}${num:+"_$num"}" "$@"
	fi
}

# search through history
hist() {
	case "$1" in
	-)
		shift
		fc -l 1 | fgrep "$1" || return 0
		read -r n || return 0
		case "$n" in
		"")
			return 0
			;;
		e*)
			n="${n#"e"}"
			fc $n
			;;
		*)
			fc -s $n
			;;
		esac
		;;
	*)
		fc -ln 1 | fgrep "$1" || return 0
		;;
	esac
}

# run previous non-doas command with doas
fuck() {
	doas $(fc -ln 1 | sed '/^[ 	]*doas /d' | sed '$!d')
}

# list entries in directory stack
dirs() {
	typeset i=0
	typeset d="$PWD"
	typeset n="${#DIRSTACK[@]}"
	while (( i <= n ))
	do
		[ n -gt 0 ] && printf "%d\t" "$i"
		case "$d/" in
		("$HOME"/*)
			printf "%s\n" "~${d#"${HOME}"}"
			;;
		(*)
			printf "%s\n" "$d"
			;;
		esac
		d="${DIRSTACK[$((i++))]}"
	done
}

# list entries in a directory or search for a file
dir() {
	typeset options="-L 1 -hNFC --dirsfirst"
	while [ "$#" -gt 0 ]
	do
		case "$1" in
		-l)
			options="$options -pug"
			shift
			;;
		-a|-d)
			options="$options $1"
			shift
			;;
		-*[!0-9]*)
			return 1
			;;
		-|-0)
			options=" ${options#"-L 1"}"
			shift
			;;
		-*[0-9]*)
			options="$options -L ${1#"-"}"
			shift
			;;
		*)
			break
			;;
		esac
	done
	case "$#" in
	0)
		colortree $options .
		;;
	1)
		colortree $options -P "*$1*" --prune .
		;;
	*)
		return 1
		;;
	esac
}

# change directory
cd() {
	if [ "$#" -eq 0 ]
	then
		set -- "$HOME"
	elif [ "$#" -gt 1 ] && [ "$1" != "+" ]
	then
		echo "$0: cd: improper argument" >&2
		return 1
	fi
	case "$1" in
	+)
		shift
		case "$#" in
		0)
			set -A tmp -- "$PWD"
			;;
		*)
			for i
			do
				typeset d="$( { command cd "$i" || { [ -e "$i" ] && command cd "$(dirname "$i")" ; } ; } >/dev/null 2>&1 && echo $PWD || echo "")"
				[ -z "$d" ] && unset tmp && echo "$0: cd: $i: unknown file" >&2 && return 1
				set -A tmp -- "${tmp[@]}" "$d"
			done
		esac
		set -A DIRSTACK -- "${tmp[@]}" "${DIRSTACK[@]}"
		unset tmp
		dirs
		return
		;;
	-)
		;;
	+*[!0-9]*|-*[!0-9]*)
		return 1
		;;
	+*)             # rotate entries
		typeset n=$(( ${1#"+"} - 1 ))
		[ -z "${DIRSTACK[$n]}" ] && return
		set -- "${DIRSTACK[$n]}"
		unset DIRSTACK[$n]
		set -A DIRSTACK -- "$PWD" "${DIRSTACK[@]}"
		;;
	-*)             # remove entry
		typeset n=$(( ${1#"-"} - 1 ))
		[ -z "${DIRSTACK[$n]}" ] && return
		unset DIRSTACK[$n]
		set -A DIRSTACK -- "${DIRSTACK[@]}"
		dirs
		return
		;;
	..|../*)        # regular dot-dot directory
		;;
	.+(.)?(/*))     # dot-dot-dot...
		typeset pre=${1%%/*}
		typeset pos=${1#*/}
		typeset n=${#pre}
		set -- "$PWD"
		while (( n-- > 1 ))
		do
			case "$1" in
			/) break ;;
			*) set -- "$(dirname "$1")" ;;
			esac
		done
		set -- "$1/$pos"
		;;
	..*)            # dot-dot plus name
		set -- "${PWD%"${PWD##*"${1#".."}"}"}"
		;;
	esac
	{
		command cd "$1" || {
			[ -e "$1" ] && command cd "$(dirname "$1")"
		}
	} >/dev/null 2>&1 || {
		echo "$0: cd: $1: unknown file" >&2 && return 1
	}
	complete make "" $(make -qp 2>/dev/null | sed -n '/^[A-Za-z][^ :]* *:/{s/\([^: ]*\).*/\1/p;}')
	dirs
}

# upload to 0x0.st
0x0() {
	[ "$#" -ne 1 ] && return
	curl -F"file=@$1" https://0x0.st
}

# colon separated list of directories used by the cd command
CDPATH=".:$HOME:$HOME/proj:$HOME/files"

# history options
HISTFILE="$HOME/var/history/ksh.hist"
HISTSIZE=1000

# fc editor
FCEDIT="${VISUAL:-${EDITOR:-"vi"}}"

# options
set -o emacs            # emacs mode for ^U and ^K keybindings, etc
set -o braceexpand      # enable brace expansion

# aliases
alias :q=exit
alias :Q=exit
alias scheme='rlwrap -q\" chibi-scheme'
alias vim='vim -p'
alias cp="cp -Riv"
alias mv="mv -iv"
alias rm='rm -riv'
alias mkdir='mkdir -p'
alias ls='ls -1Fh'      # append file indicator to entries, print human readable sizes
alias lc='ls -C'        # columns
alias ll='ls -l'        # Lists directory contents in a long format
alias la='lc -A'
alias lla='ll -A'
alias tree='tree -F'
alias hex='hexdump -C'
alias od='od -cAx'
alias df='df -h'
alias du='du -ch'
alias doas='doas '
alias l='less'
alias v='vim'
alias c='cd'
alias d='dir'
alias dira='dir -a'
alias da='dir -a'
alias setbg='feh --no-fehbg --bg-tile'

# Completions
complete skel 1 $(\ls -1 "$SKEL")
complete make "" $(make -qp 2>/dev/null | sed -n '/^[A-Za-z][^ :]* *:/{s/\([^: ]*\).*/\1/p;}')
complete sysctl "" $(sysctl | sed 's/[ =].*//')
complete rcctl 1 disable enable get ls order set restart start stop
complete rcctl 2 $(rcctl ls all)
complete git 1 $(git --list-cmds=main)
complete mpc 1 $(mpc help | awk '$1 == "mpc" { print $2 }')
complete mpc 2 $(mpc lsplaylists | sort)

# prompt
PS1='$(
	case "$PWD/" in
	("$HOME"/*)
		_dir="~${PWD#"${HOME}"}"
		;;
	(*)
		_dir="$PWD"
		;;
	esac
	_cols=$((COLUMNS - ${#_dir}))
	_tty=$(tty)
	_tty=${_tty#/dev/}
	if [ $(id -u) -eq 0 ]
	then
		_color="1;31m"
	else
		_color="1m"
	fi
	printf "\\\\[\e]0;%s: %s\a\\\\]\n\\\\[\e[0m\\\\]\\\\[\e[s\\\\]\\\\[\e[%sG\\\\]%s\\\\[\e[u\\\\]\\\\[\e[%s\\\\] ‚ùØ \\\\[\e[0m\\\\]"\
	       "$_tty" "$_dir" "$_cols" "$_dir" "$_color"
)'

# print non-zero exit value
trap 'printf "\e[1;31mEXIT: %s\e[0m\n" "$?"' ERR
