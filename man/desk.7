.TH DESK 7
.SH NAME
desk \- my desktop
.SH DESCRIPTION
This manual describes my user session and how to interact with it.
.SH Shell session
I use
.IR ksh (1)
with emacs-like keybindings.
History is saved on
.BR ~/var/history/ksh.hist .
.PP
My PS1 prompt has the following structure:
.IP \(bu 2
The prompt sets the window title for the name of the tty and the cwd (current working directory)
separated by a colon and a space.
The /dev/ prefix is removed from the tty name;
and the $HOME prefix is replaced by a
.B ~
(tilde)
on the cwd name
So if I am at /home/phill/tmp on /dev/ttyp2,
the title of the window will be
.IR "ttyp2: ~/tmp" .
.IP \(bu 2
The prompt begins with a newline,
for displaying vertical space between the output of the previous command and the current prompt.
This makes easier the prompt visual identification.
.IP \(bu 2
If the previous command exits with non-zero exit status,
this exit status is printed, as bold and red, at the beginning of the prompt.
.IP \(bu 2
The left prompt consists of a single
.B ❯
character.
This character is white for normal users and red for the super user.
The left prompt is padded at the left with a single space.
.IP \(bu 2
The right prompt is the cwd with the $HOME prefix replaced by a ~.
The right prompt is padded at the right with a single space.
.PP
I use few aliases, most of them to force human-readable output.
The most useful alias is
.IR fuck ,
which rerun the previous command with
.IR doas (1).
.IP
.EX
alias fuck='doas $(fc -ln -1)'
.EE
.SH X session
I use a blank desktop with no bars, docks or panels.
.PP
The first thing done when logging in a X session is
to load the environment variables (by sourcing ~/.profile)
and to load the X resources with
.IR xrdb (1).
Key combinations are bound to commands by
.IR sxhkd (1).
The cursor is made invisible after a brief period by
.IR unclutter (1).
Music is managed by the
.IR mpd (1)
music playing daemon.
.PP
There are two ways of interacting with the desktop:
using the mouse (which displays a pmenu(1)),
or using the keyboard (which displays a xprompt(1)).
Both ways output a command to a interpreter called xinterp(1).
Responses are output in a notification window managed by xnotify(1).
Each piece communicates with another by means of two named pipes,
.B $XNOTIFY_FIFO
and
.BR $XINTERP_FIFO .
.SS Desktop Notification
The
.B $XNOTIFY_FIFO
environment variable contains the path to a named pipe read by a program called
.IR xnotify (1).
This program reads lines from its stdin
and pops up a desktop notification for each read line.
This named pipe is written by several scripts.
.PP
First, a script called
.IR notify
is run in the background
and checks the battery and computer temperature every minute.
If the battery is below 20% or the temperature is above 60°C,
a line is written into
.B $XNOTIFY_FIFO
and a notification is displayed for the user.
.PP
The
.IR xinterp (1)
script also writes into
.B $XNOTIFY_FIFO
depending on the instruction it reads (see next section below).
For example, when it receives an instruction to change the music,
a notification containing the currently playing song is sent to
.BR $XNOTIFY_FIFO ;
when it receives an instruction to change the current desktop,
a notification listing the desktops is sent to
.BR $XNOTIFY_FIFO .
.SS The Desktop Interpreter
The
.B $XINTERP_FIFO
environment variable contains the path to a named pipe read by a script called
.IR xinterp (1).
This script reads instructions from its stdin
and run a given command depending on the instruction read.
Those instructions are generated by
.IR pmenu (1)
via mouse interaction
(see the
.B Using the Mouse
section below),
and by
.IR xprompt (1)
via keyboard interaction
(see the
.B Using the Keyboard
section below).
.PP
For example, when selecting Firefox to be run using
.IR pmenu (1),
the command
.B \(dqrun firefox\(dq
is sent to
.BR $XINTERP_FIFO .
The run command opens a new instance of a program or focus an already existing one.
.PP
.IR xinterp (1)
understand several instructions,
such as to launch an application,
open a manual page with
.IR zathura (1),
change the current desktop,
manipulate the current window, etc.
.SS Using the mouse
When right clicking on the root window (ie', the desktop),
a pie menu is displayed by
.IR pmenu (1).
.PP
This
.IR pmenu (1)
instance reads menu options from
.BR ~/var/cache/pmenu.cache ,
and outputs instructions to
.B $XINTERP_FIFO
to be interpreted by
.IR xinterp (1).
The cache file is generated by
.IR xinterp (1)
with the following command:
.IP
.EX
$ xinterp menu
.EE
.PP
With the pie menu, the user can launch applications,
change the current desktop,
draw a terminal on the screen,
change the song,
take a screenshot,
and control the active window.
.SS Using the keyboard
When typing anything on the root window, a prompt is displayed by
.IR xprompt (1).
.PP
This
.IR xprompt (1)
instance reads options from.
.B ~/var/cache/xprompt.cache ,
and outputs instructions to
.B $XINTERP_FIFO
to be interpreted by
.IR xinterp (1).
The cache file is generated by
.IR xinterp (1)
with the following command:
.IP
.EX
$ xinterp prompt
.EE
.PP
With the prompt, the user can type any instruction that
.IR xinterp (1)
understands, for example, open man pages.
.SS The Window Manager
Windows are managed by the
.IR shod (1)
window manager.
It is an hybrid (tiling and floating) window manager
that is controlled solely by responding to client messages with EWMH hints
and regular ICCCM events, and by using a given key modifier with the mouse pointer.
.PP
Shod maintains one set of desktop for each monitor.
Each set of desktop works like GNOME activities:
The X session begins with a single desktop;
when a window is created, this desktop is populated, and a new empty desktop is created.
When an empty desktop is populated, a new empty one is created.
.PP
Windows begin floating on the desktop and are spawned in a proper empty place.
The first window is spawned on the center of the monitor.
The next windows are arranged in empty spaces on the monitor.
.PP
When a window is maximized, it is tiled.
Tiled windows are organized in columns;
each tiled window ocupies a row in a column.
This columnated behavior imitates the way
.IR acme (1)
handle its columns and frames.
.SH SEE ALSO
.IR home (7)
