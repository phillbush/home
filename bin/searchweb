#!/bin/sh
#
# Usage: search [QUERY ...]
# Search QUERYs in duckduckgo.
# Depends on curl(1), awk(1), ifne(1).
#
# Â© 2025 Lucas de Sena <lucas at seninha dot org>.  No rights reserved.
# THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY (Works On My Machine).

test "$#" -lt 1 && {
	printf "usage: %s query ...\n" "${0##*/}" >&2
	printf "       %s\n" 'Try to use "intitle:", "inurl:", and "site:" query modifiers.' >&2
	printf "       %s\n" 'Prepend a query with "-" to ignore results.' >&2
	exit 2
}

_curl() {
	url="$1"
	shift
	curl --silent --location --data "kp=-1" --data "kd=-1" --data-urlencode "q=$*" --get "$url" \
	#--user-agent 'Dillo/3.2.0' \
	#--header 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \
	#--header 'Accept-Encoding: gzip, deflate' \
	#--header 'DNT: 1' \
	#--header 'Referer: https://duckduckgo.com/' \
	#--header 'Connection: keep-alive' \
	#--cookie ''
	## uncomment the lines above if ddg gets angry
}

_awk() {
	tr -d '[:cntrl:]' | TZ="UTC" LC_CTYPE="C.UTF-8" awk -vRS="<" '
	function gottag(tag, class) {
		if (index($0, tag) != 1)
			return 0
		if (class == "")
			return 1
		if (substr($0, length(tag) + 1, 1) != " ")
			return 0
		if (!match($0, /class=["'\''][^"'\'']+["'\'']/))
			return 0
		if (!index(substr($0, RSTART, RLENGTH), class))
			return 0
		return 1
	}

	function unescape_percent(str) {
		gsub(/%20/, " ", str)
		gsub(/%21/, "!", str)
		gsub(/%22/, "\"", str)
		gsub(/%23/, "#", str)
		gsub(/%24/, "$", str)
		gsub(/%25/, "%", str)
		gsub(/%26/, "\\&", str)
		gsub(/%27/, "'\''", str)
		gsub(/%28/, "(", str)
		gsub(/%29/, ")", str)
		gsub(/%2[Aa]/, "*", str)
		gsub(/%2[Bb]/, "+", str)
		gsub(/%2[Cc]/, ",", str)
		gsub(/%2[Dd]/, "-", str)
		gsub(/%2[Ee]/, ".", str)
		gsub(/%2[Ff]/, "/", str)
		gsub(/%3[Aa]/, ":", str)
		gsub(/%3[Bb]/, ";", str)
		gsub(/%3[Cc]/, "<", str)
		gsub(/%3[Dd]/, "=", str)
		gsub(/%3[Ee]/, ">", str)
		gsub(/%3[Ff]/, "?", str)
		gsub(/%40/, "@", str)
		gsub(/%5[Bb]/, "[", str)
		gsub(/%5[Cc]/, "\\", str)
		gsub(/%5[Dd]/, "]", str)
		gsub(/%5[Ee]/, "^", str)
		gsub(/%5[Ff]/, "_", str)
		gsub(/%60/, "`", str)
		gsub(/%7[Bb]/, "{", str)
		gsub(/%7[Cc]/, "|", str)
		gsub(/%7[Dd]/, "}", str)
		gsub(/%7[Ee]/, "~", str)
		return str
	}

	function unescape_html(str) {
		gsub(/&#x20;/, " ", str)
		gsub(/&#x21;/, "!", str)
		gsub(/&(#x22|quot);/, "\"", str)
		gsub(/&#x23;/, "#", str)
		gsub(/&#x24;/, "$", str)
		gsub(/&#x25;/, "%", str)
		gsub(/&(#x26|amp);/, "\\&", str)
		gsub(/&#x27;/, "'\''", str)
		gsub(/&#x28;/, "(", str)
		gsub(/&#x29;/, ")", str)
		gsub(/&#x2[Aa];/, "*", str)
		gsub(/&#x2[Bb];/, "+", str)
		gsub(/&#x2[Cc];/, ",", str)
		gsub(/&#x2[Dd];/, "-", str)
		gsub(/&#x2[Ee];/, ".", str)
		gsub(/&#x2[Ff];/, "/", str)
		gsub(/&#x3[Aa];/, ":", str)
		gsub(/&#x3[Bb];/, ";", str)
		gsub(/&(#x3[Cc]|lt);/, "<", str)
		gsub(/&#x3[Dd];/, "=", str)
		gsub(/&(#x3[Ee]|gt);/, ">", str)
		gsub(/&#x3[Ff];/, "?", str)
		gsub(/&#x40;/, "@", str)
		gsub(/&#x5[Bb];/, "[", str)
		gsub(/&#x5[Cc];/, "\\", str)
		gsub(/&#x5[Dd];/, "]", str)
		gsub(/&#x5[Ee];/, "^", str)
		gsub(/&#x5[Ff];/, "_", str)
		gsub(/&#x60;/, "`", str)
		gsub(/&#x7[Bb];/, "{", str)
		gsub(/&#x7[Cc];/, "|", str)
		gsub(/&#x7[Dd];/, "}", str)
		gsub(/&#x7[Ee];/, "~", str)
		return str
	}

	function printbody() {
		sub(/.*>/, "")
		gsub("(&nbsp;)+", " ")
		printf "%s", unescape_html($0)
	}

	function printtag(name) {
		sub(/.*>[[:space:]]*/, "")
		do {
			printbody()
		} while (getline > 0 && !gottag("/" name))
	}

	function gethref(a) {
		if (!match(a, /href=["'\''][^"'\'']+["'\'']/))
			return
		return substr(a, RSTART + 6, RLENGTH - 7)
	}
	'"$@"
}

## I could use webdump(1) here; but
htmlfmt_ddg() {
	_awk '
	NR == 0 {
		next
	}

	gottag("a", "result-link") {
		link = gethref($0)
		printtag("a"); print ""
		if (link)
			print link
		next
	}

	gottag("td", "result-snippet") {
		printtag("td")
		printf "\n\n"
		next
	}

	gottag("td") {
		if ($0 !~ "Zero-click info")
			next
		getline
		if (!gottag("a"))
			next
		link = gethref($0)
		while (getline > 0 && !gottag("td"))
			;
		if (!gottag("td"))
			next
		if (link)
			print link
		printtag("td")
		printf "\n\n"
		next
	}
	'
}

htmlfmt_occ() {
	sed -En '/<hr>/h;${x;p;}' | _awk '
	gottag("a") {
		link = gethref($0)
		sub(/[^=]*=/, "", link)
		sub(/&.*/, "", link)
		link = unescape_percent(link)
		if (link)
			print link
		next
	}

	gottag("br") {
		print ""
		next
	}

	{
		printbody()
	}
	' | awk -v"RS=" -v"FS=\n" -v"OFS=" 'NF > 0 {
		print $2
		print $1
		$1=""
		$2=""
		$3=""
		$0=$0
		print
		print ""
	}'
}

## ignore shity saits
#set -- "$@" \
#	-site:w3schools.com \
#	-site:geeksforgeeks.com \
#	-site:https://www.freecodecamp.org \
#	-site:fandom.com

{
	## uncomment one of the duckduckgo frontends below
	_curl "https://duckduckgo.com/lite/" "$@"	| htmlfmt_ddg
	#_curl "https://deadnet.se/occs/" "$@"		| htmlfmt_occ
}
