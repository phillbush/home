" /.vimrc -- Vim rc file
"
" Initialization script for vim.
" Vim sucks. I want to move to something else.
"
" © 2024 Lucas de Sena <lucas at seninha dot org>.
" No rights reserved.  Dedicated into Public Domain.  Use as you will.
" THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY (works on my machine™)

set nocompatible noautochdir nomodeline encoding=utf-8 fileencodings=utf-8

"" cache directory for swap, backup, undo, etc; except for temporary files
if (!empty($CACHEDIR))
	call mkdir($CACHEDIR . "/vim/swap", "p")
	call mkdir($CACHEDIR . "/vim/backup", "p")
	call mkdir($CACHEDIR . "/vim/undo", "p")
	set directory=$CACHEDIR/vim/swap
	set backupdir=$CACHEDIR/vim/backup
	set undodir=$CACHEDIR/vim/undo
	set viminfo+=n$CACHEDIR/vim/viminfo
	set undofile backup writebackup
endif
set backupskip=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*
autocmd BufNewFile,BufReadPre /tmp/*,$TMPDIR/*,$TMP/*,$TEMP/* setlocal noswapfile noundofile viminfo=

"" status interface; document identification; etc
set laststatus=0 title showcmd showmode
set nonumber nocursorline
set ruler rulerformat=%30(%=%l/%L:%c%V\ hex:%B\ %p%%\ %#ModeMsg#%(\ %M\ %)%)
set scrolloff=5

"" input behavior
set backspace=indent,eol,nostop
set virtualedit=block           " place cursor on no text (eg' after EOL)
set noexpandtab
set tabstop=8 softtabstop=8 shiftwidth=8

"" searching
set incsearch hlsearch smartcase

"" how text is displayed
set nowrap
set showmatch                           " highlight matching brackets
set showbreak=↳\                        " what to display when wrapping
set list listchars=tab:.\ ,trail:.      " display unprintable characters

"" tags
set tags=./tags,tags,~/.tags,/usr/src/lib/*/tags,/usr/xenocara/lib/*/src/tags

"" automatic text formating and indention
set nocopyindent noautoindent nopreserveindent
set smartindent
set textwidth=72
set formatoptions=cqjr
set comments=s1:/*,mb:*,ex:*/,:;,://,b:#,:%,:XCOMM,nb:>,nfb:--,nfb:•,nfb:·,fb:→,nb:│,nb:\|,nb:\"

"" remap retard default key commands
noremap 0 ^|     " to non-blank beginning of line (<ZERO>)
noremap ) 0|     " to beginning of line (<SHIFT-ZERO>)
noremap - $|     " to end of line (<HYPHEN>, cuz it's after <ZERO>)
noremap _ _|     " to non-blank end of line (<SHIFT-ZERO>)
noremap k gk|    " move up by visual/virtual line
noremap j gj|    " move down by visual/virtual line
noremap W b|     " if <W> is word forward, <SHIFT-W> should be word backward
noremap E ge|    " if <E> is end of word forward, <SHIFT-E> should be end of word backward
noremap Y y$|    " if <SHIFT-ANY> does <ANY> until end of line, why <SHIFT-Y> does not?
noremap U <C-R>| " if <U> undoes, <SHIFT-U> should redo
noremap gu U

"" macros (i never use them tho)
noremap b @
noremap B q

"" buffer
function! DelBuffer()
	if !buflisted(bufnr()) || len(getbufinfo({'buflisted':1})) == 1
		return "quit"
	else
		return "bdelete"
	endif
endfunction
noremap q :bn!<C-M>
noremap Q :bp!<C-M>
command! -bang Quit execute DelBuffer() . "<bang>"
cabbrev quit Quit
cabbrev q Quit
command W w
command Q q

"" complation and behavior of <Tab> in insert mode
set path=.,/usr/include,/usr/X11R6/include,/usr/local/include,,
set completeopt=menuone complete=.,k,i,d
function! TabWrapper()
	let col  = virtcol('.') - 1
	let end = charcol('.') - 1
	let line = getline('.')
	let char = line[end - 1]

	" cursor at beginning of line or at tab; insert tab
	if col == 0 || char == "\t"
		return "	"
	endif

	" cursor at space; insert spaces until next tabstop
	if char == " "
		return repeat(" ", &softtabstop - (col % &softtabstop))
	endif

	" get start of potential filename
	let start = end
	while start > 0 && line[start - 1] =~ '\f'
		let start -= 1
	endwhile

	if start >= 0 && line[start:end] =~ '^\(\~\|\.\|\.\.\)\?/'
		" filename begins with / or ~/ or ./ or ../
		return "\<C-X>\<C-F>"
	else
		" do regular completion
		return "\<C-N>"
	endfi
endfunction
inoremap <expr> <Tab>   complete_info()['mode'] != "" ? "\<C-N>" : "\<C-R>=TabWrapper()\<CR>"
inoremap <expr> <S-Tab> complete_info()['mode'] != "" ? "\<C-P>" : "\<S-Tab>"
inoremap <expr> <Esc>   complete_info()['mode'] != "" ? "\<C-E>" : "\<Esc>"
inoremap <expr> <CR>    complete_info()['mode'] != "" ? "\<C-Y>" : "\<CR>"

" folding and behavior of <Tab> in normal mode
noremap <Tab>   za
noremap <expr> <S-Tab> &foldlevel ? "zM" : "zR"
function! CommentFolding(lnum)
endfunction
function! TxtFolding(lnum)
	let curline  = getline(a:lnum)
	if curline =~# '^\s*$' && getline(a:lnum + 1) !~# '^\s*$'
		let nextfold = TxtFolding(a:lnum + 1)
		return nextfold[0] == '>' ? nextfold[1] : '='
	elseif curline =~# '^\(.* \)\?§\+ ' | return '>' .. (len(matchstr(curline,'§\+'))/2)
	endif
	return '='
endfunction
function! MdFolding(lnum)
	let curline  = getline(a:lnum)
	if curline =~# '^\s*$' && getline(a:lnum + 1) !~# '^\s*$'
		let nextfold = MdFolding(a:lnum + 1)
		return nextfold[0] == '>' ? nextfold[1] : '='
	elseif curline =~# '^#\+ ' | return '>' .. len(matchstr(curline,'#\+'))
	endif
	return '='
endfunction
set foldexpr=TxtFolding(v:lnum)
set foldenable
set foldlevelstart=99
set foldminlines=1
set foldopen=hor,insert,mark,search,undo
set foldtext=getline(v:foldstart).'\ '
filetype on

"" buffer
function! Bufcmd()
	syntax region  Fold   start=+^\([^[:blank:]].*\)\?[{(]$+ end=+^%\?[})]+ skip=+^[})].*[{(]$+ transparent fold contains=ALL
	syntax region  Ignore start=+“+ skip=+\\\\\|\\”+ end=+”+ oneline
	syntax region  Ignore start=+"+ skip=+\\\\\|\\"+ end=+"+ oneline
	syntax region  Ignore start=+'+ skip=+\\\\\|\\'+ end=+'+ oneline
	syntax region  Ignore start=+\(^\|\s\)\(\* \|#\|//\|\*/\|/\*\|"\)+ end=+$+ oneline
	syntax match   Ignore "[^[:space:]]*|[^[:space:]]*"
	syntax sync fromstart
	if index(["c","cpp","yacc","lex","awk","sh","bc"], &filetype) != -1
		set foldmethod=syntax
		syntax match Constant /\<\([_[:upper:][:digit:]]\{3,}\|[[:digit:]]*\)\>/
	elseif &filetype == "markdown"
		set foldexpr=MdFolding(v:lnum)
		set foldmethod=expr
	elseif &filetype == "text"
		set foldexpr=TxtFolding(v:lnum)
		set foldmethod=expr
		set formatoptions+=t
	endif
endfunction
autocmd BufEnter * eval Bufcmd()
autocmd BufNewFile,BufRead * if empty(&filetype) | set foldexpr=TxtFolding(v:lnum) foldmethod=expr formatoptions+=t | endif

"" no syntax highlighting; only highlight interface elements
"" (vim sucks; need to manually unset every highlight group to remove its shitty default colors)
hi Ignore       NONE
hi CursorLine   NONE
hi Folded       NONE
hi Constant     NONE ctermfg=red
hi SpecialKey   NONE ctermfg=gray
hi EndOfBuffer  NONE ctermfg=gray
hi Pmenu        NONE ctermbg=gray
hi Search       NONE ctermbg=yellow
hi IncSearch    NONE ctermbg=yellow
hi CurSearch    NONE ctermbg=yellow
hi PmenuSel     NONE cterm=reverse
hi Visual       NONE cterm=reverse
hi MatchParen   NONE cterm=underline
hi Cursor       NONE cterm=reverse
hi StatusLine   NONE cterm=reverse,bold
hi ModeMsg      NONE cterm=reverse,bold
