" /.vimrc -- Vim rc file

" Paths
set directory=$HOME/var/cache/vim/swap     " directory of swap files
set backupdir=$HOME/var/cache/vim/backup   " viminfo filename
set undodir=$HOME/var/cache/vim/undo
set viminfo+=n$HOME/var/cache/vim/viminfo

" basic settings
set encoding=utf8
set hidden                              " hide buffers, don't close
set autoread                            " reload on external file changes
set nocompatible                        " enable Vi improvements, required for plugins
set noautochdir                         " some plugins requires this option be off
set modelines=0                         " for security reasons
set nomodeline                          " for security reasons
set undofile                            " persist the undo tree for each file
set mouse=a                             " enable mouse
set wildmenu                            " command line completion
set backspace=indent,eol,start          " backspace
set scrolloff=5                         " scrolling; make some content visible when scrolling
set clipboard=unnamedplus,autoselect    " enable clipboard
set lazyredraw                          " redraw only when we need to
set background=dark

" Virtual edit: Position cursor where there isn't text (e.g. after EOL)
set virtualedit=block                   " allow virtual edit in Visual Block Mode only

" Searching
set incsearch                           " show where the pattern matches as it was typed so far
set hlsearch                            " highlight the search matching text
set smartcase                           " try to be smart about case when searching

" statusline and ruler
set laststatus=0                        " do not show statusline
set showcmd                             " show a command as it is being typed
set showmode                            " show current mode
set ruler                               " show ruler
set rulerformat=%60(%=%f\ %y\ (%l:%c%V\ hex:%B\ %p%%)\ %#ModeMsg#%(\ %M\ %)%)

" Line indentification
set number                              " show line number
set cursorline                          " highlight the screen line of the cursor

" Tabulation
set noexpandtab                         " if on, <Tab>/<BS> inserts/deletes 'softtabstop' spaces instead of Tabulation
set smarttab                            " if on, <Tab> inserts 'shiftwidth' at beginning of line and 'tabstop' elsewhere
set softtabstop=8                       " number of spaces to fill/delete at once
set shiftwidth=8                        " number of columns of a shift (if zero, equals to tabstop)
set tabstop=8                           " number of columns of a tabulation

" how text is displayed
set nowrap
set showmatch                           " show matching brackets
set showbreak=↳\                        " wrapping character
set listchars=tab:․\ ,trail:․           " string to use for the :list command
set list                                " display unprintable characters

" Indention
set copyindent                          " copy the structure of the existing lines indent when autoindenting a new line
set autoindent                          " copy indent from current line when starting a new line 
set preserveindent                      " when changing the indent of the curent line, preserve as much of the indent structure as possible
set smartindent                         " start indentation automatically, when inserting newline after a '{' for example

" Completion
set complete=.,w,b,u,k,kspell,t,i,d,    " controls where the completions are searched
set completeopt=longest,menuone         " control how the completion occurs
set omnifunc=syntaxcomplete#Complete    " set the complete function

" Text formatting
set textwidth=72                        " wrap line after 72 chracters
set formatoptions=cqjr
set comments=s1:/*,mb:*,ex:*/,:;,://,b:#,:%,:XCOMM,nb:>,nfb:--,nfb:•,nfb:·,fb:→,nb:│,nb:\|,nb:\"

" folding
set foldenable
set foldminlines=1
set foldopen=hor,insert,mark,search,undo
set foldcolumn=1
set foldmethod=marker
set foldtext=getline(v:foldstart).'\ '  " The text shown in closed folds

" netrw
let g:netrw_banner = 0          " Hide banner
let g:netrw_liststyle = 3       " Tree directory listing
let g:netrw_sort_by = "name"    " Tree directory listing
let g:netrw_sort_sequence = ""
let g:netrw_browse_split = 0
let g:netrw_winsize = 20
map <Leader><Leader> :Explore<C-M>

" Let commands w, q and wq case insensitive
command Q q
command W w
command Wq w
command WQ w
cabbrev wq w
cabbrev wQ w

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" highlight last inserted text
nnoremap gv `[v`]

" remap b to q
noremap q <Esc>
noremap Q <Esc>
noremap b @
noremap B q

" line motion
noremap 0 ^
noremap ) 0
noremap - $
noremap _ _

" object motion
noremap W b
noremap E ge

" mark motion
noremap m '
noremap M `
noremap gm m

" Operators: Operate to end of line
noremap Y y$

" Undo: Map <u> to undo; <U> to redo; and <gU> reverse line
noremap gu U
noremap U <C-R>

" traverse undo tree
nnoremap <Leader>u g-
nnoremap <Leader>U g+

"" Copying/pasting from X
map <Leader>p "+p
map <Leader>y "+y
map <Leader>d "+d
map <Leader>P "+P

" Jumplist
noremap H <C-O>
noremap L <C-I>

" Changelist
noremap go  g;
noremap gi  g,

" text completion
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <C-F> <C-X><C-F>
inoremap <C-N> <C-X><C-N>
inoremap <C-D> <C-X><C-D>
inoremap <C-Space> <C-P>

" Tab: insert Tab for indenting, space elsewhere; do completion and folding
function! TabWrapper(shift)
	let col = col('.') - 1
	let vcol = virtcol('.') - 1
	if !vcol || getline('.')[col - 1] =~ '	'
		return "	"
	elseif getline('.')[col -1] =~ '^\s*$'
		return repeat(" ", &softtabstop - (vcol % &softtabstop))
	elseif (a:shift)
		return "\<C-P>"
	else
		return "\<C-N>"
	endif
endfunction
inoremap <tab> <c-r>=TabWrapper(0)<CR>
inoremap <S-tab> <c-r>=TabWrapper(1)<CR>
noremap <Tab>   za
noremap <S-Tab> zm

" folding functions
function! TxtFolding(lnum)
	let curline  = getline(a:lnum)
	if curline =~# '^\s*$' && getline(a:lnum + 1) !~# '^\s*$'
		let nextfold = TxtFolding(a:lnum + 1)
		return nextfold[0] == '>' ? nextfold[1] : '='
	elseif curline =~# '^§\+ ' | return '>' .. (len(matchstr(curline,'^§\+'))/2)
	endif
	return '='
endfunction
function! MdFolding(lnum)
	let curline  = getline(a:lnum)
	if curline =~# '^\s*$' && getline(a:lnum + 1) !~# '^\s*$'
		let nextfold = MdFolding(a:lnum + 1)
		return nextfold[0] == '>' ? nextfold[1] : '='
	elseif curline =~# '^##\+ ' | return '>' .. (len(matchstr(curline,'^##\+'))-1)
	endif
	return '='
endfunction
function! CFolding(lnum)
	let curline  = getline(a:lnum)
	if curline =~# '^[^	 ].*{$'         | return '>1'
	elseif curline =~# '^{$'                | return '>1'
	elseif curline =~# '^}.*{$'             | return '='
	elseif curline =~# '^%\?}'              | return '<1'
	elseif curline =~# '^%%$'
		if foldlevel(a:lnum - 1) == 1
			return '<1'
		else
			return '>1'
		endif
	endif
	return '='
endfunction

" file type detections
filetype plugin indent on
autocmd Bufenter *.scm,*.rkt set lisp expandtab
autocmd Bufenter *.s set syntax=asm
autocmd Bufenter *.txt set foldexpr=TxtFolding(v:lnum) foldmethod=expr
autocmd Bufenter *.txt set formatoptions+=t
autocmd Bufenter *.md set foldexpr=MdFolding(v:lnum) foldmethod=expr
autocmd FileType c,cpp,yacc,lex,awk set foldexpr=CFolding(v:lnum) foldmethod=expr

" Syntax highlighting
syntax on
hi Comment      ctermfg=8       ctermbg=None    cterm=None
hi PreProc      ctermfg=8       ctermbg=None    cterm=None
hi String       ctermfg=7       ctermbg=None    cterm=Bold,Italic
hi Title        ctermfg=7       ctermbg=None    cterm=Bold,Italic
hi Constant     ctermfg=9       ctermbg=None    cterm=None
hi Special      ctermfg=15      ctermbg=None    cterm=None
hi Identifier   ctermfg=15      ctermbg=None    cterm=None
hi Statement    ctermfg=15      ctermbg=None    cterm=None
hi Conditional  ctermfg=15      ctermbg=None    cterm=None
hi Repeat       ctermfg=15      ctermbg=None    cterm=None
hi Structure    ctermfg=15      ctermbg=None    cterm=None
hi Function     ctermfg=15      ctermbg=None    cterm=None
hi Operator     ctermfg=15      ctermbg=None    cterm=None
hi Type         ctermfg=15      ctermbg=None    cterm=None
hi Error        ctermfg=11      ctermbg=9       cterm=None
hi TODO         ctermfg=9       ctermbg=11      cterm=Bold
hi Folded       ctermfg=15      ctermbg=none    cterm=None
hi Underlined   ctermfg=7                       cterm=None
hi NonText      ctermfg=8                       cterm=None
hi SpecialKey   ctermfg=8                       cterm=None
hi Visual                                       cterm=None
hi Cursor                                       cterm=Reverse
hi CursorLine                   ctermbg=0       cterm=None
hi Search       ctermfg=0       ctermbg=11      cterm=None
hi Directory    ctermfg=None    ctermbg=None    cterm=Bold,Italic
hi ErrorMsg     ctermfg=11      ctermbg=9       cterm=Bold
hi WarningMsg   ctermfg=None    ctermbg=None    cterm=Reverse,Bold
hi ModeMsg      ctermfg=None    ctermbg=None    cterm=Reverse,Bold
hi Pmenu        ctermfg=None    ctermbg=0       cterm=None
hi PmenuSel     ctermfg=None    ctermbg=0       cterm=Reverse,Bold
hi PmenuSbar    ctermfg=8       ctermbg=8       cterm=None
hi PmenuThumb   ctermfg=15      ctermbg=15      cterm=None
hi FoldColumn   ctermfg=8       ctermbg=None    cterm=None
hi SignColumn   ctermfg=9       ctermbg=None    cterm=None
hi LineNr       ctermfg=8       ctermbg=None    cterm=Bold
hi CursorLineNr ctermfg=15      ctermbg=0       cterm=Bold
hi StatusLine   ctermfg=11      ctermbg=4       cterm=Bold
hi StatusLineNC ctermfg=12      ctermbg=7       cterm=none
hi VertSplit    ctermfg=4       ctermbg=4       cterm=None
hi TabLine      ctermfg=8       ctermbg=4       cterm=None
hi TabLineSel   ctermfg=12      ctermbg=0       cterm=None
hi TabLineFill  ctermfg=15      ctermbg=4       cterm=None
